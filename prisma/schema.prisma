generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id              String      @id @default(cuid())
  name            String      @unique
  type            ProductType
  description     String?
  referenceCode   String      @unique
  quantityInStock Int         @default(0)
  minQuantity     Int         @default(0)
  expiryDate      DateTime?
  supplierId String?
  serviceId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stockMovements StockMovement[]
  purchaseItems  PurchaseItem[]

  supplier User? @relation(fields:[supplierId],references: [id])
  service Service? @relation(fields:[serviceId],references: [id])
}

model Service {
  id        String          @id @default(cuid())
  name      String          @unique
  products Product[]
  personnel User[]
  orders    PurchaseOrder[]
}

model StockMovement {
  id        String       @id @default(cuid())
  productId String
  type      MovementType
  quantity  Int
  reason    String?
  doneById  String?

  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  doneBy  User?   @relation(fields: [doneById], references: [id])
}


model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  address     String?
  phoneNumber String?
  roleId    String
  serviceId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stockMovements StockMovement[]
  products Product[]

  purchaseOrders PurchaseOrder[]
  role           Role            @relation(fields: [roleId], references: [id])
  service        Service?        @relation(fields: [serviceId], references: [id])
}

model PurchaseOrder {
  id           String      @id @default(cuid())
  userId   String?
  orderDate    DateTime    @default(now())
  deliveryDate DateTime?
  status       OrderStatus @default(PENDING)
  totalAmount  Int?

  serviceId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  service       Service?       @relation(fields: [serviceId], references: [id])
  user      User?      @relation(fields: [userId], references: [id])
  purchaseItems PurchaseItem[]
}

model PurchaseItem {
  id               String @id @default(cuid())
  purchaseOrderId  String
  productId        String
  quantityOrdered  Int
  quantityReceived Int?
  unitPrice        Int?

  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  product       Product       @relation(fields: [productId], references: [id])
}



model Role {
  id    String @id @default(cuid())
  name  String
  users User[]
}

enum ProductType {
  MEDICAMENT
  MATERIEL
  CONSOMMABLE
  AUTRE
}

enum MovementType {
  ENTREE
  SORTIE
}

enum OrderStatus {
  PENDING
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
}
